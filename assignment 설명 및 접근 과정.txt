=====================================================
divide_image.py

calSize() 함수 => 이미지의 사이즈를 리턴해주는 함수

divide() 함수 => 주어진 shape대로 이미지를 나눠주는 함수 
=====================================================

merge_image.py

Image_op 클래스 => 이미지의 상태를 정의하는 클래스 / 
		몇번 Rotate 됐는지에 대한 정보와 플립 상태를 포함하고 있는 클래스

cost_check() 함수 => 조각난 이미지가 어디에 배열되었는지를 계산하고 이미지 외곽 부분의 차를 통해 cost를 통해 이미지가 자연스럽게 			연결되었는지를 측정하는 함수 / 현재 이 부분에서의 이슈로 인해 마무리 짓지 못하였습니다. 추정하기로는 rotate와 
		flip을 계산해 배열하는 과정에서 미스가 있는 것으로 보여집니다.

back_tracking() 함수 => 재귀적으로 조각난 이미지가 어디에 배열되어야 하는지를 배열해가며 cost 함수를 통해 얻어진 cost를 비교해 가		장 최적의 이미지 배열을 찾아가는 함수

merge() 함수 => 기본적인 것들을 정의해주는 함수 / 이미지 디렉토리, 클래스를 통해 이미지 객체 생성, 그리고 완성된 이미지 저장하는 		역할을 하는 함수

=====================================================

해당 방법에 접근해간 과정

1. 일차적으로 문제를 접했을 때, 가장 먼저 떠올린 방법은 이미지 스티칭 기법 혹은 파노라마 기법이었습니다. 이미지의 특징점을 탐색해 특징점을 통해 이미지를 붙여야겠다고 생각했으나, dividing 방법이 단순 col 과 row로 이미지를 나누는 방법이었기에 중복되는 특징점을 찾기 어려울 것이라고 판단했습니다.


2. 이후 이미지를 붙여놓았을때 이미지가 자연스럽게 이어진다면 인접한 픽셀의 값의 흐름도 비슷할 것이라고 판단해 조각난 이미지를 배열 후 이미지 외곽의 차를 통해 cost를 구해 이미지 배열을 해야겠다고 판단했습니다.